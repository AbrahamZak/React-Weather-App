{"version":3,"sources":["components/WeatherCard/Location.js","components/WeatherCard/Condition.js","components/WeatherCard/Icon.js","components/WeatherCard/component.js","components/WeatherEngine.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","country","Container","styled","div","City","h1","Country","h3","Condition","temp","condition","Temp","State","Icon","img","icon","className","src","alt","WeatherCard","highColor","lowColor","bg","Card","WeatherEngine","location","useState","query","setQuery","weather","setWeather","getWeather","q","a","fetch","apiRes","json","restJSON","main","name","sys","useEffect","value","onChange","e","target","onClick","preventDefault","handleSearch","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f13f9d7d.chunk.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled';\n\nconst Location = ({city, country}) => {\n\n    const Container = styled.div`\n        text-align: center;\n    `;\n\n    const City = styled.h1`\n        font-family: 'Merriweather', sans-serif;\n        font-size: 1.6rem;\n    `;\n\n    const Country = styled.h3`\n        font-family: 'Fira Sans', sans-serif;\n        font-size: 1.1rem;\n    `;\n\n    return (  \n        <Container>\n            <City>{city}</City>\n            <Country>{country}</Country>\n        </Container>\n    );\n}\n \nexport default Location;","import React from 'react'\nimport styled from '@emotion/styled';\n\nconst Condition = ({temp, condition}) => {\n\n    const Temp = styled.h1`\n    font-family: 'Fira Sans', sans-serif;\n    font-size: 2rem;\n    font-weight: 200;\n    `;\n\n    const State = styled.h3`\n    font-family: 'Merriweather', sans-serif;\n    font-size: 1.2rem; \n    `;\n\n    return (  \n        <>\n        <Temp>{temp} Â°C</Temp>\n        <State>{condition}</State>\n        </>\n    );\n}\n \nexport default Condition;","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst Icon = ({condition}) => {\n\n    const Icon = styled.img`\n    width: 40%;\n    `;\n\n    var icon = ''\n\n      switch (condition) {\n        case \"Clouds\":\n          icon = `./img/Mostly Cloudy-2x.png`;\n          break;\n        case \"Clear\":\n          icon = `./img/Mostly Sunny-2x.png`;\n          break;\n        case \"Haze\":\n          icon = `./img/Haze-2x.png`;\n          break;\n        case \"Hail\":\n          icon = `./img/Hail-2x.png`;\n          break;\n        case \"Fog\":\n          icon = `./img/Fog-2x.png`;\n          break;\n        case \"Tornado\":\n          icon = `./img/Tornado-2x.png`;\n          break;\n        case \"Dust\":\n          icon = `./img/Dust-2x.png`;\n          break;\n        case \"Mist\":\n          icon = `./img/Fog-2x.png`;\n          break;\n        case \"Snow\":\n          icon = `./img/Snow-2x.png`;\n          break;\n        case \"Rain\":\n          icon = `./img/Rain-2x.png`;\n          break;\n        case \"Drizzle\":\n          icon = `./img/Drizzle-2x.png`;\n          break;\n        case \"Thunderstorm\":\n          icon = `./img/Severe Thunderstorm-2x.png`;\n          break;\n        default:\n          icon = `./img/Fog-2x.png`;\n          break;\n      }\n      \n    return (  \n        <Icon\n            className=\"icon\"\n            src={icon}\n            alt=\"Weather Icon\"\n        />\n    );\n}\n \nexport default Icon;","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Location from './Location'\nimport Condition from './Condition';\nimport Icon from './Icon';\n\nconst WeatherCard = ({temp, condition, city, country}) => {\n    //Adjust colors depending on temperature\n    let highColor = 0;\n    let lowColor = 0;\n    let bg = null;\n    //Hot weather background colors\n    if (temp > 12){\n        highColor = (1-((temp-12) / 28)) * 255;\n        lowColor = highColor - 150;\n        bg = `linear-gradient(\n            to top, \n            rgb(255, ${highColor}, 0),\n            rgb(255, ${lowColor}, 0)\n            )`;\n    }\n    //Cold weather background colors\n    else if (temp <= 12){\n        highColor = (1-((temp+20) / 32)) * 255;\n        lowColor = highColor - 150;\n        bg = `linear-gradient(\n            to top, \n            rgb(0, ${highColor}, 255),\n            rgb(0, ${lowColor}, 255)\n            )`;\n    }\n    const Card = styled.div`\n        margin: 0 auto;\n        background: ${bg};\n        width: 200px;\n        height: 240px;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-around;\n        align-items: center;\n        border-radius: 15px;\n    `;\n\n    return (  \n        <Card>\n            <Location city={city} country={country}/>\n            <Icon condition = {condition} />\n            <Condition temp = {temp} condition = {condition}/>\n        </Card>\n    );\n}\n \nexport default WeatherCard;","import React, {useState, useEffect} from 'react';\n\nimport WeatherCard from './WeatherCard/component';\n\nconst WeatherEngine = ({location}) => {\n  //Variable for current query\n  const[query, setQuery] = useState('');\n  //Variable containing the weather data\n  const[weather, setWeather] = useState({\n    temp: null,\n    city: null,\n    condition: null,\n    country: null\n  });\n  \n  //Get data from API based on query and set the weather\n  const getWeather = async(q) => {\n    const apiRes = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${q}&units=metric&appid=1775d51d3e8458b665930f2e4acd22d3`\n      );\n    const restJSON = await apiRes.json();\n    setWeather({\n      temp: restJSON.main.temp,\n      city: restJSON.name,\n      condition: restJSON.weather[0].main,\n      country: restJSON.sys.country\n    });\n  };\n\n  //Function when city is searched for\n  const handleSearch = (e) => {\n    e.preventDefault();\n    getWeather(query);\n  };\n\n  //Get the default cities data on page load\n  useEffect( () => {\n    getWeather(location);\n  }, [location])\n\n  return (\n    <div className=\"App\">\n      <WeatherCard \n        temp={weather.temp} \n        condition={weather.condition} \n        city={weather.city} \n        country={weather.country}\n      />\n      <form>\n        <input value={query} onChange={(e)=>setQuery(e.target.value)}/>\n        <button onClick={e=>handleSearch(e)}>Search</button>\n      </form>\n    </div>\n  );\n};\n\nexport default WeatherEngine;\n\n","import React from 'react';\n\nimport './App.css';\nimport WeatherEngine from \"./components/WeatherEngine\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"WeatherBox\">\n     <WeatherEngine location='Albany, US'/>\n     <WeatherEngine location='Chicago, US'/>\n     <WeatherEngine location='Houston, US'/>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}